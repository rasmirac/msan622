panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12))
print(bar_plot)
# third plot
small_mult_plot <- ggplot(movies_subset, aes(x=budget, y=rating, group = factor(genre))) +
geom_point(aes(colour = factor(genre))) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget by Genre') +
facet_wrap(~genre, ncol = 3)  +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10)) +
guides(colour=FALSE) + scale_colour_manual(values=my_palette) +
theme(panel.margin = unit(.6, "lines"))
print(small_mult_plot)
# fourth plot
# transform eurodata
eu <- transform(data.frame(EuStockMarkets), time = as.numeric(time(EuStockMarkets)))
eu_m <- melt(eu, id.vars = 'time', value = c('DAX', 'SMI', 'CAC', 'FTSE'))
# pallete
new_lineplot <- ggplot(eu_m, aes(x=time, y=value, group = as.factor(variable), color = as.factor(variable))) +
geom_line() + xlab('Time') +
ggtitle('European Stock Index Values Over Time') +
ylab('Value') + theme(text = element_text(size=10)) +
scale_colour_brewer(type = 'qual', palette = 7, name = 'Index') +
scale_x_continuous(breaks=c(1990, 1992, 1994, 1996, 1998))
print(new_lineplot)
# saving files
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3.75, width=4.5)
ggsave(filename = 'hw1-bar.png', plot = bar_plot, height=6, width=8.5)
ggsave(filename = 'hw1-multiples.png', plot = small_mult_plot, height=7, width=8.5)
ggsave(filename = 'hw1-multiline.png', plot = new_lineplot, height=3.4, width=5)
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3, width=3.75)
dir <- getwd()
setwd(dir)
library(ggplot2)
library(scales)
library(reshape)
library(grid)
# load dataset
data(movies)
data(EuStockMarkets)
# perform transformation on movies
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = genre
# remove movies with budget of zero or less
movies_subset <- subset(movies, movies$budget > 0)
# custom palette for genres
my_palette <- c("sienna2", "steelblue3", "darkolivegreen3", "slateblue3", "#333366", "bisque3","slategray4", 'brown3', "gold3")
million_formatter <- function(x) {
#label <- round(x / 1000)
return(sprintf("$%dM", x / 1000000))
}
# first plot
scatter_plot <- ggplot(movies_subset, aes(x=budget, y=rating)) +
geom_point(color = 'slategray4', alpha = .8, size = 1) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget') +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10))+
theme(title = element_text(size=10),
axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8))
print(scatter_plot)
# second plot
bar_plot <- ggplot(movies_subset, aes(x = genre, y = ..count..)) +
geom_bar(aes(fill = factor(genre))) +
ggtitle('Count of Movies by Genre') +
guides(fill=FALSE) +
scale_y_continuous(expand = c(0, 25))+
scale_fill_manual(values=my_palette) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12))
print(bar_plot)
# third plot
small_mult_plot <- ggplot(movies_subset, aes(x=budget, y=rating, group = factor(genre))) +
geom_point(aes(colour = factor(genre))) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget by Genre') +
facet_wrap(~genre, ncol = 3)  +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10)) +
guides(colour=FALSE) + scale_colour_manual(values=my_palette) +
theme(panel.margin = unit(.6, "lines"))
print(small_mult_plot)
# fourth plot
# transform eurodata
eu <- transform(data.frame(EuStockMarkets), time = as.numeric(time(EuStockMarkets)))
eu_m <- melt(eu, id.vars = 'time', value = c('DAX', 'SMI', 'CAC', 'FTSE'))
# pallete
new_lineplot <- ggplot(eu_m, aes(x=time, y=value, group = as.factor(variable), color = as.factor(variable))) +
geom_line() + xlab('Time') +
ggtitle('European Stock Index Values Over Time') +
ylab('Value') + theme(text = element_text(size=10)) +
scale_colour_brewer(type = 'qual', palette = 7, name = 'Index') +
scale_x_continuous(breaks=c(1990, 1992, 1994, 1996, 1998))
print(new_lineplot)
# saving files
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3, width=3.75)
ggsave(filename = 'hw1-bar.png', plot = bar_plot, height=6, width=8.5)
ggsave(filename = 'hw1-multiples.png', plot = small_mult_plot, height=7, width=8.5)
ggsave(filename = 'hw1-multiline.png', plot = new_lineplot, height=3.4, width=5)
setwd("~/Documents/_DataVisualization/msan622/homework2")
runApp()
library(shiny)
shinyUI(
pageWithSidebar(
titlePanel("Movie Ratings and Budget"),
sidebarPanel(
# Add a drop-down box for sort columns.
radioButtons(
"ratingsToShow",
"MPAA Ratings:",
c("All", "PG", "PG-13", "R", 'NC-17')
),
checkboxGroupInput(
inputId = "highlight",
label = "Movie Genre",
choices = c('Action', 'Animation', 'Comedy', 'Documentary', 'Drama', 'Romance', 'Short', "Mixed", 'None')
),
selectInput(
inputId = "colorScheme",
label = "Color Scheme:",
choices = c("Default", "Accent", "Set 1", "Set 2", "Set 3", "Dark 2", "Pastel 1", "Pastel 2")
),
sliderInput("range", "Budget Range:",
min = 1, max = 200000000, step = 1000000, value = c(1, 200000000)
),
sliderInput(
inputId = 'alpha',
label = 'Opacity Level:',
min = 0.1,
max = 1.0,
step = .1,
value = .5,
ticks = FALSE
),
sliderInput(
inputId = 'size',
label = 'Point Size:',
min = 1,
max = 10,
value = 5,
ticks = FALSE
),
checkboxInput(
"grid",
"Remove Grid",
FALSE
),
checkboxInput(
"background",
"White Background",
FALSE
),
checkboxInput(
"jitter",
"Jitter Points",
FALSE
),
width = 3, height = 10
),
mainPanel(plotOutput("scatterPlot", height = 575, width = 800))
)
)
library(shiny)
library(ggplot2)
library(scales)
# load data
data("movies", package = "ggplot2")
# create genre variable
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
# subset data
movies_subset <- subset(movies, (movies$budget > 0 | movies$budget == '') & movies$mpaa != '' )
# for formatting budget values
million_formatter <- function(x) {
return(sprintf("$%dM", as.integer(x/1000000)))
}
getPlot <- function(localFrame, colorScheme = "Default", highlight, ratingsToShow, alpha_level, point_size, range, grid, background, jitter) {
full_mpaas <- levels(localFrame$mpaa)[which(levels(localFrame$mpaa)!='')]
if (ratingsToShow != 'All'){
localFrame <- localFrame[which(localFrame$mpaa == ratingsToShow),]
}
if (length(highlight) != 0){
localFrame <- localFrame[which(localFrame$genre %in% highlight),]
}
if (nrow(localFrame) == 0){
return('Data is empty.')
}
localPlot <- ggplot(localFrame, aes(x = as.numeric(budget), y = rating, color = factor(mpaa))) +
scale_x_continuous(limits = range,
label = million_formatter,
expand = c(0, .01*(range[2] - range[1]))) +
scale_y_continuous(limits = c(0, 10),
expand = c(0, 0.25)) +
theme(axis.ticks.x = element_blank()) +
theme(axis.text.y = element_text(size = 12)) +
theme(axis.text.x = element_text(size = 12)) +
theme(legend.position = 'bottom') +
xlab('Budget') + ylab('Rating') +
ggtitle("Movie Ratings by Budget")
if (jitter == TRUE){
localPlot <- localPlot + geom_jitter(size = point_size, alpha = alpha_level, position = 'jitter')
}
else{
localPlot <- localPlot + geom_point(size = point_size, alpha = alpha_level)
}
mpaas <- levels(localFrame$mpaa)
if (grid == TRUE){
localPlot <- localPlot + theme(panel.grid = element_blank())
}
if (background == TRUE){
if (grid == FALSE){
localPlot <- localPlot + theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = 'gray90'),
panel.grid.minor = element_line(colour = 'gray90'),
legend.key = element_rect(fill = NA))
}
else{
localPlot <- localPlot + theme(panel.background = element_blank(),
panel.grid = element_blank(),
legend.key = element_rect(fill = NA))
}
}
if (colorScheme == "Pastel 1") {
my_palette <- brewer_pal(type = "qual", palette = 'Pastel1')(length(mpaas))
}
else if (colorScheme == "Accent") {
my_palette <- brewer_pal(type = "qual", palette = 'Accent')(length(mpaas))
}
else if (colorScheme == "Set 1") {
my_palette <- brewer_pal(type = "qual", palette = 'Set1')(length(mpaas))
}
else if (colorScheme == "Set 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Set2')(length(mpaas))
}
else if (colorScheme == "Set 3") {
my_palette <- brewer_pal(type = "qual", palette = 'Set3')(length(mpaas))
}
else if (colorScheme == "Dark 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Dark2')(length(mpaas))
}
else if (colorScheme == "Pastel 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Pastel2')(length(mpaas))
}
else if (colorScheme == 'Default'){
return(localPlot + scale_color_discrete(name = 'MPAA Rating', limits = full_mpaas))
}
localPlot <- localPlot + scale_color_manual(values = my_palette, name = 'MPAA Rating', limits = full_mpaas)
return(localPlot)
}
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
# Copy the data frame (don't want to change the data
# frame for other viewers)
localFrame <- movies_subset
output$scatterPlot <- renderPlot(
{
# Use our function to generate the plot.
scatterPlot <- getPlot(
localFrame,
input$colorScheme,
input$highlight,
input$ratingsToShow,
input$alpha,
input$size,
input$range,
input$grid,
input$background,
input$jitter
)
# Output the plot
print(scatterPlot)
}
)
})
# add in geom_jitter as an option??
runApp()
?theme
runApp()
runApp()
library(shiny)
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
library(shiny)
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
library(shiny)
shinyUI(
pageWithSidebar(
titlePanel("Movie Ratings and Budget"),
sidebarPanel(
# Add a drop-down box for sort columns.
radioButtons(
"ratingsToShow",
"MPAA Ratings:",
c("All", "PG", "PG-13", "R", 'NC-17')
),
checkboxGroupInput(
inputId = "highlight",
label = "Movie Genre",
choices = c('Action', 'Animation', 'Comedy', 'Documentary', 'Drama', 'Romance', 'Short', "Mixed", 'None')
),
selectInput(
inputId = "colorScheme",
label = "Color Scheme:",
choices = c("Default", "Accent", "Set 1", "Set 2", "Set 3", "Dark 2", "Pastel 1", "Pastel 2")
),
sliderInput("range", "Budget Range:",
min = 1, max = 200000000, step = 1000000, value = c(1, 200000000)
),
sliderInput(
inputId = 'alpha',
label = 'Opacity Level:',
min = 0.1,
max = 1.0,
step = .1,
value = .5,
ticks = FALSE
),
sliderInput(
inputId = 'size',
label = 'Point Size:',
min = 1,
max = 10,
value = 5,
ticks = FALSE
),
checkboxInput(
"grid",
"Remove Grid",
FALSE
),
checkboxInput(
"background",
"White Background",
FALSE
),
checkboxInput(
"jitter",
"Jitter Points",
FALSE
),
width = 3, height = 10
),
mainPanel(plotOutput("scatterPlot", height = 575, width = 800))
)
)
library(shiny)
library(ggplot2)
library(scales)
# load data
data("movies", package = "ggplot2")
# create genre variable
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
# subset data
movies_subset <- subset(movies, (movies$budget > 0 | movies$budget == '') & movies$mpaa != '' )
# for formatting budget values
million_formatter <- function(x) {
return(sprintf("$%dM", as.integer(x/1000000)))
}
getPlot <- function(localFrame, colorScheme = "Default", highlight, ratingsToShow, alpha_level, point_size, range, grid, background, jitter) {
full_mpaas <- levels(localFrame$mpaa)[which(levels(localFrame$mpaa)!='')]
if (ratingsToShow != 'All'){
localFrame <- localFrame[which(localFrame$mpaa == ratingsToShow),]
}
if (length(highlight) != 0){
localFrame <- localFrame[which(localFrame$genre %in% highlight),]
}
if (nrow(localFrame) == 0){
return('Data is empty.')
}
localPlot <- ggplot(localFrame, aes(x = as.numeric(budget), y = rating, color = factor(mpaa))) +
scale_x_continuous(limits = range,
label = million_formatter,
expand = c(0, .01*(range[2] - range[1]))) +
scale_y_continuous(limits = c(0, 10),
expand = c(0, 0.25)) +
theme(axis.ticks.x = element_blank()) +
theme(axis.text.y = element_text(size = 12)) +
theme(axis.text.x = element_text(size = 12)) +
theme(legend.position = 'bottom') +
xlab('Budget') + ylab('Rating')
if (jitter == TRUE){
localPlot <- localPlot + geom_jitter(size = point_size, alpha = alpha_level, position = 'jitter')
}
else{
localPlot <- localPlot + geom_point(size = point_size, alpha = alpha_level)
}
mpaas <- levels(localFrame$mpaa)
if (grid == TRUE){
localPlot <- localPlot + theme(panel.grid = element_blank())
}
if (background == TRUE){
if (grid == FALSE){
localPlot <- localPlot + theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = 'gray90'),
panel.grid.minor = element_line(colour = 'gray90'),
legend.key = element_rect(fill = NA))
}
else{
localPlot <- localPlot + theme(panel.background = element_blank(),
panel.grid = element_blank(),
legend.key = element_rect(fill = NA))
}
}
if (colorScheme == "Pastel 1") {
my_palette <- brewer_pal(type = "qual", palette = 'Pastel1')(length(mpaas))
}
else if (colorScheme == "Accent") {
my_palette <- brewer_pal(type = "qual", palette = 'Accent')(length(mpaas))
}
else if (colorScheme == "Set 1") {
my_palette <- brewer_pal(type = "qual", palette = 'Set1')(length(mpaas))
}
else if (colorScheme == "Set 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Set2')(length(mpaas))
}
else if (colorScheme == "Set 3") {
my_palette <- brewer_pal(type = "qual", palette = 'Set3')(length(mpaas))
}
else if (colorScheme == "Dark 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Dark2')(length(mpaas))
}
else if (colorScheme == "Pastel 2") {
my_palette <- brewer_pal(type = "qual", palette = 'Pastel2')(length(mpaas))
}
else if (colorScheme == 'Default'){
return(localPlot + scale_color_discrete(name = 'MPAA Rating', limits = full_mpaas))
}
localPlot <- localPlot + scale_color_manual(values = my_palette, name = 'MPAA Rating', limits = full_mpaas)
return(localPlot)
}
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
# Copy the data frame (don't want to change the data
# frame for other viewers)
localFrame <- movies_subset
output$scatterPlot <- renderPlot(
{
# Use our function to generate the plot.
scatterPlot <- getPlot(
localFrame,
input$colorScheme,
input$highlight,
input$ratingsToShow,
input$alpha,
input$size,
input$range,
input$grid,
input$background,
input$jitter
)
# Output the plot
print(scatterPlot)
}
)
})
setwd("~/Documents/_DataVisualization/msan622/homework2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
