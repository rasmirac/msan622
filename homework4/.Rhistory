rot.per = 0.3,          # percent rotated
# set colors
# colors = brewer.pal(9, "GnBu")
colors = brewer.pal(12, "Paired"),
# color random or by frequency
random.color = TRUE,
# use r or c++ layout
use.r.layout = FALSE
)
getWC <- wordcloud(
text_df$word,
text_df$value,
scale = c(0.5, 6),      # size of words
min.freq = 10,          # drop infrequent
max.words = 30,         # max words in plot
random.order = FALSE,   # plot by frequency
rot.per = 0.3,          # percent rotated
# set colors
# colors = brewer.pal(9, "GnBu")
colors = brewer.pal(12, "Paired"),
# color random or by frequency
random.color = TRUE,
# use r or c++ layout
use.r.layout = FALSE
)
getWC
plot(getWC)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wordcloud
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
require(ggplot2)
filename <- 'prideandprej'
source("text.r")
# Sort bars by frequency
top_book <- head(text_df[which(text_df$variable == 'book'),], 10)
top_screen <- head(text_df[which(text_df$variable == 'screenplay'),], 10)
bar_df <- rbind(top_book, top_screen)
bar_df$word <- factor(bar_df$word,
levels = bar_df$word,
ordered = TRUE)
# Print a simple bar plot of the top 10 words
p <- ggplot(bar_df, aes(x = word, y = value)) +
geom_bar(stat = "identity", fill = "grey60") +
ggtitle("Most Common Words in No Country for Old Men") +
xlab("Top 10 Word Stems (Stop Words Removed)") +
ylab("Frequency") +
facet_wrap(~variable, ncol = 2, scale="free_x")
#  theme_minimal() +
#  scale_x_discrete(expand = c(0, 0)) +
#  scale_y_continuous(expand = c(0, 0)) +
#  theme(panel.grid = element_blank()) +
#  theme(axis.ticks = element_blank())
print(p)
#ggsave(
#  filename = file.path("img", "sotu_bar.png"),
#  width = 6,
#  height = 4,
#  dpi = 100
#)
library(shiny)
library(ggplot2)
library(scales)
require(wordcloud)
getPlot <- function(text_data, whichtoshow) {
text_data <- head(text_data, 10)
text_data$word <- factor(text_data$word,
levels = text_data$word,
ordered = TRUE)
p <- ggplot(text_data, aes(x = word, y = value)) +
geom_bar(stat = "identity", fill = "grey60", alpha = .85) +
ggtitle("Most Common Words in No Country for Old Men") +
xlab("Top 10 Word Stems (Stop Words Removed)") +
ylab("Frequency") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 500)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12))
return(p)
}
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
my_data <- reactive({
filename <- input$book
source("text.r")
localFrame <- text_df
if (input$whichtoshow == 'Screenplay'){
text_data <- localFrame[which(localFrame$variable == 'screenplay'),]
}
else if (input$whichtoshow == 'Book'){
text_data <- localFrame[which(localFrame$variable == 'book'),]
}
return(text_data)
})
output$barPlot <- renderPlot(
{
# Use our function to generate the plot.
barPlot <- getPlot(
my_data(),
input$whichtoshow
)
# Output the plot
print(barPlot)
}
)
output$wordCloud <- renderPlot({
wordcloud(
my_data()$word,
my_data()$value,
scale = c(2, 6),      # size of words
min.freq = 10,          # drop infrequent
max.words = 30,         # max words in plot
random.order = FALSE,   # plot by frequency
rot.per = 0,          # percent rotated
# set colors
# colors = brewer.pal(9, "GnBu")
colors = brewer.pal(8, "Dark2"),
# color random or by frequency
random.color = FALSE,
# use r or c++ layout
use.r.layout = FALSE
)
})
})
library(shiny)
shinyUI(
pageWithSidebar(
titlePanel("Comparing screenplays and novels"),
sidebarPanel(
# Add a drop-down box for sort columns.
radioButtons(
"whichtoshow",
'',
choices = c("Screenplay", "Book")
),
br(),
radioButtons(
"book",
'Book to Movie: ',
choices = c("No Country for Old Men" = 'nocountry', "Pride and Prejudice" = 'prideandprej')
)
),
mainPanel(
# Create a tab panel.
tabsetPanel(
# Add a tab for displaying the histogram.
tabPanel("Bar Plot", plotOutput("barPlot", height = 700, width = 900)),
tabPanel("Word Cloud", plotOutput("wordCloud", height = 700, width = 1000))
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(data_frame)
filename
filename
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
freq_df <- data.frame(
novel = sotu_matrix[, "book.txt"],
screenplay = sotu_matrix[, "screenplay.txt"],
stringsAsFactors = FALSE)
freq_df <- data.frame(
novel = text_n[which(text_n$variable == 'book')],
screenplay = text_n[which(text_n$variable == 'screenplay')],
stringsAsFactors = FALSE)
freq_df <- data.frame(
novel = text_data[which(text_data$variable == 'book'),],
screenplay = text_data[which(text_data$variable == 'screenplay'),],
stringsAsFactors = FALSE)
freq_df <- data.frame(
novel = text_n[which(text_n$variable == 'book'),],
screenplay = text_n[which(text_n$variable == 'screenplay'),],
stringsAsFactors = FALSE)
head(freq_df)
rownames(text_n)
text_data <- text_data[rowSums(text_data) > 100,]
text_data <- text_n[rowSums(text_n) > 100,]
runApp()
runApp()
runApp()
runApp()
head(text_n)
head(text_n)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(text_f)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_pallete <- brewer.pal(1, "Dark2")
my_pallete <- brewer_pal(type = "qual", palette = 'Dark2')(1)
my_pallete
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wordcloud
?wordcloud
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?paste
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?theme
?theme
runApp()
runApp()
runApp()
runApp()
runApp()
?brewer.pal
library(shiny)
library(ggplot2)
library(scales)
library(wordcloud)
library(RColorBrewer)
source('text.r')
my_pallete <- brewer_pal(type = "qual", palette = 'Dark2')(1)
getPlot <- function(text_data, whichtoshow, wordsBar, book) {
text_data <- head(text_data, wordsBar)
text_data$word <- factor(text_data$word,
levels = text_data$word,
ordered = TRUE)
p <- ggplot(text_data, aes(x = word, y = value)) +
geom_bar(stat = "identity", fill = my_pallete, alpha = .85) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, max(text_data$value) + 50)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 13),
title = element_text(size = 16))
if (book == 'nocountry'){
p <- p + ggtitle(paste('Word Frequencies for No Country for Old Men', paste('(', whichtoshow,')', sep =''), sep = ' '))
}
else if (book == 'prideandprej'){
p <- p + ggtitle(paste('Word Frequencies for Pride and Prejudice', paste('(', whichtoshow,')', sep =''), sep = ' '))
}
else if (book == 'fightclub'){
p <- p + ggtitle(paste('Word Frequencies for Fight Club', paste('(', whichtoshow,')', sep =''), sep = ' '))
}
return(p)
}
getScPlot <- function(text_data, whichtoshow, book) {
text_data <- data.frame(
novel = text_data[which(text_data$variable == 'book'),],
screenplay = text_data[which(text_data$variable == 'screenplay'),],
stringsAsFactors = FALSE)
text_data <- text_data[(text_data$novel.value > 75 & text_data$screenplay.value > 75),]
p <- ggplot(text_data, aes(novel.value, screenplay.value))
p <- p + geom_text(
aes(label = novel.word), size = 7,
position = position_jitter(
width = 10,
height = 10), color = my_pallete)
p <- p + xlab("Novel") + ylab("Screenplay")
p <- p + ggtitle("Screenplay vs. Novel")
p <- p + scale_x_continuous(expand = c(0, 25))
p <- p + scale_y_continuous(expand = c(0, 25))
p <- p + theme(title = element_text(size = 16),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank())
if (book == 'nocountry') {
p <- p + ggtitle('No Country for Old Men: Screenplay vs. Novel')
}
else if (book == 'prideandprej') {
p <- p + ggtitle('Pride and Prejudice: Screenplay vs. Novel')
}
else if (book == 'fightclub') {
p <- p + ggtitle('Fight Club: Screenplay vs. Novel')
}
return(p)
}
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
my_data <- reactive({
if (input$book == 'nocountry'){
localFrame <- text_n
}
else if (input$book == 'prideandprej'){
localFrame <- text_p
}
else if (input$book == 'fightclub'){
localFrame <- text_f
}
if (input$whichtoshow == 'Screenplay'){
text_data <- localFrame[which(localFrame$variable == 'screenplay'),]
}
else if (input$whichtoshow == 'Novel'){
text_data <- localFrame[which(localFrame$variable == 'book'),]
}
return(text_data)
})
output$barPlot <- renderPlot(
{
data <- my_data()
# Use our function to generate the plot.
barPlot <- getPlot(
data,
input$whichtoshow,
input$wordsBar,
input$book
)
# Output the plot
print(barPlot)
}
)
output$scatterPlot <- renderPlot(
{
if (input$book == 'nocountry'){
localFrame <- text_n
}
else if (input$book == 'prideandprej'){
localFrame <- text_p
}
else if (input$book == 'fightclub'){
localFrame <- text_f
}
# Use our function to generate the plot.
scatterPlot <- getScPlot(
localFrame,
input$whichtoshow,
input$book
)
# Output the plot
print(scatterPlot)
}
)
output$wordCloud <- renderPlot({
wordcloud(
my_data()$word,
my_data()$value,
scale = c(8, 2),      # size of words
min.freq = 25,          # drop infrequent
max.words = 75, # max words in plot
random.order = FALSE,   # plot by frequency
rot.per = 0,          # percent rotated
# set colors
# colors = brewer.pal(9, "GnBu")
colors = brewer.pal(8, "Dark2"),
# color random or by frequency
random.color = FALSE
)
})
})
library(shiny)
shinyUI(
pageWithSidebar(
titlePanel("Comparing screenplays and novels"),
sidebarPanel(
# Add a drop-down box for sort columns.
radioButtons(
"book",
'Which text do you want? ',
choices = c('Fight Club' = 'fightclub',
"No Country for Old Men" = 'nocountry',
"Pride and Prejudice" = 'prideandprej'
)
),
br(),
radioButtons(
"whichtoshow",
'Verion of Text: ',
choices = c("Screenplay", "Novel")
),
br(),
radioButtons(
"wordsBar",
'Number of words in bar plot: ',
choices = c(10, 15, 20)
), width = 3, height = 8
),
mainPanel(
# Create a tab panel.
tabsetPanel(
# Add a tab for displaying the histogram.
tabPanel("Bar Plot", plotOutput("barPlot", height = 700, width = 1000)),
tabPanel("Word Cloud", plotOutput("wordCloud", height = 700, width = 1000)),
tabPanel("Scatter Plot", plotOutput("scatterPlot", height = 700, width = 900))
)
)
)
)
setwd("~/Documents/_DataVisualization/msan622/homework4")
runApp90
runApp()
runGitHub("msan622", "rasmirac", subdir = "homework4")
runGitHub("msan622", "rasmirac", subdir = "homework4")
