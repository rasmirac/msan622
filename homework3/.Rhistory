# first plot
scatter_plot <- ggplot(movies_subset, aes(x=budget, y=rating)) +
geom_point(color = 'slategray4', alpha = .8, size = 1) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget') +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10))+
theme(title = element_text(size=10),
axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8))
print(scatter_plot)
# second plot
bar_plot <- ggplot(movies_subset, aes(x = genre, y = ..count..)) +
geom_bar(aes(fill = factor(genre))) +
ggtitle('Count of Movies by Genre') +
guides(fill=FALSE) +
scale_y_continuous(expand = c(0, 25))+
scale_fill_manual(values=my_palette) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12))
print(bar_plot)
# third plot
small_mult_plot <- ggplot(movies_subset, aes(x=budget, y=rating, group = factor(genre))) +
geom_point(aes(colour = factor(genre))) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget by Genre') +
facet_wrap(~genre, ncol = 3)  +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10)) +
guides(colour=FALSE) + scale_colour_manual(values=my_palette) +
theme(panel.margin = unit(.6, "lines"))
print(small_mult_plot)
# fourth plot
# transform eurodata
eu <- transform(data.frame(EuStockMarkets), time = as.numeric(time(EuStockMarkets)))
eu_m <- melt(eu, id.vars = 'time', value = c('DAX', 'SMI', 'CAC', 'FTSE'))
# pallete
new_lineplot <- ggplot(eu_m, aes(x=time, y=value, group = as.factor(variable), color = as.factor(variable))) +
geom_line() + xlab('Time') +
ggtitle('European Stock Index Values Over Time') +
ylab('Value') + theme(text = element_text(size=10)) +
scale_colour_brewer(type = 'qual', palette = 7, name = 'Index') +
scale_x_continuous(breaks=c(1990, 1992, 1994, 1996, 1998))
print(new_lineplot)
# saving files
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3.75, width=4.5)
ggsave(filename = 'hw1-bar.png', plot = bar_plot, height=6, width=8.5)
ggsave(filename = 'hw1-multiples.png', plot = small_mult_plot, height=7, width=8.5)
ggsave(filename = 'hw1-multiline.png', plot = new_lineplot, height=3.4, width=5)
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3, width=3.75)
dir <- getwd()
setwd(dir)
library(ggplot2)
library(scales)
library(reshape)
library(grid)
# load dataset
data(movies)
data(EuStockMarkets)
# perform transformation on movies
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = genre
# remove movies with budget of zero or less
movies_subset <- subset(movies, movies$budget > 0)
# custom palette for genres
my_palette <- c("sienna2", "steelblue3", "darkolivegreen3", "slateblue3", "#333366", "bisque3","slategray4", 'brown3', "gold3")
million_formatter <- function(x) {
#label <- round(x / 1000)
return(sprintf("$%dM", x / 1000000))
}
# first plot
scatter_plot <- ggplot(movies_subset, aes(x=budget, y=rating)) +
geom_point(color = 'slategray4', alpha = .8, size = 1) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget') +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10))+
theme(title = element_text(size=10),
axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8))
print(scatter_plot)
# second plot
bar_plot <- ggplot(movies_subset, aes(x = genre, y = ..count..)) +
geom_bar(aes(fill = factor(genre))) +
ggtitle('Count of Movies by Genre') +
guides(fill=FALSE) +
scale_y_continuous(expand = c(0, 25))+
scale_fill_manual(values=my_palette) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12))
print(bar_plot)
# third plot
small_mult_plot <- ggplot(movies_subset, aes(x=budget, y=rating, group = factor(genre))) +
geom_point(aes(colour = factor(genre))) +
xlab('Budget') + ylab('Rating') +
ggtitle('Rating vs. Budget by Genre') +
facet_wrap(~genre, ncol = 3)  +
scale_x_continuous(label=million_formatter) +
scale_y_continuous(breaks=c(2,6,10)) +
guides(colour=FALSE) + scale_colour_manual(values=my_palette) +
theme(panel.margin = unit(.6, "lines"))
print(small_mult_plot)
# fourth plot
# transform eurodata
eu <- transform(data.frame(EuStockMarkets), time = as.numeric(time(EuStockMarkets)))
eu_m <- melt(eu, id.vars = 'time', value = c('DAX', 'SMI', 'CAC', 'FTSE'))
# pallete
new_lineplot <- ggplot(eu_m, aes(x=time, y=value, group = as.factor(variable), color = as.factor(variable))) +
geom_line() + xlab('Time') +
ggtitle('European Stock Index Values Over Time') +
ylab('Value') + theme(text = element_text(size=10)) +
scale_colour_brewer(type = 'qual', palette = 7, name = 'Index') +
scale_x_continuous(breaks=c(1990, 1992, 1994, 1996, 1998))
print(new_lineplot)
# saving files
ggsave(filename = 'hw1-scatter.png', plot = scatter_plot, height=3, width=3.75)
ggsave(filename = 'hw1-bar.png', plot = bar_plot, height=6, width=8.5)
ggsave(filename = 'hw1-multiples.png', plot = small_mult_plot, height=7, width=8.5)
ggsave(filename = 'hw1-multiline.png', plot = new_lineplot, height=3.4, width=5)
library(shiny)
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
library(shiny)
shiny::runGitHub('msan622', 'heyi87', subdir='homework2')
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
library(foreign)
yourData <- read.dta("/Users/rachelsmith/Downloads/National Study of Youth and Religion, Wave 3 (2007-2008).DTA")
head(yourData)
View(yourData)
View(yourData)
library(shiny)
shiny::runGitHub('msan622', 'cadancai', subdir='homework2')
shiny::runGitHub('msan622', 'heyi87', subdir='homework2')
shiny::runGitHub('msan622', 'heyi87', subdir='homework2')
library(shiny)
shiny::runGitHub('msan622', 'rasmirac', subdir = 'homework2')
library(ggplot2)
library(shiny)
?state.x77
df <- data.frame(state.x77, State = state.name, Abbrev = state.abb, Region = state.region, Division = state.division )
library(shiny)
# Create a simple shiny page.
shinyUI(
# We will create a page with a sidebar for input.
pageWithSidebar(
# Add title panel.
titlePanel("Understanding State Data"),
# Setup sidebar widgets.
sidebarPanel(
checkboxGroupInput(
inputId = "regionsToShow",
label = "Regions:",
choices = c('Northeast', 'South', 'North Central', 'West')
),
br(),
selectInput(
inputId = "xAxis",
label = "X-axis Variable: ",
choices = c("Population",
"Income",
"Illiteracy Rate",
"Life Expectancy" ,
"Murder Rate" ,
"High School Graduates" ,
"Frost",
'Area'),
selected = 'Frost'
),
selectInput(
inputId = "yAxis",
label = "Y-axis Variable: ",
choices = c("Population",
"Income",
"Illiteracy Rate",
"Life Expectancy",
"Murder Rate",
"High School Graduates",
"Frost",
'Area'),
selected = 'Murder Rate'
),
selectInput(
inputId = "size_var",
label = "Size Variable: ",
choices = c("Population",
"Income",
"Illiteracy Rate",
"Life Expectancy" ,
"Murder Rate" ,
"High School Graduates",
"Frost",
'Area'),
selected = 'Illiteracy Rate'
),
checkboxInput(
"show_labels",
"Show State Labels",
FALSE
),
br(),
selectInput(
inputId = "colorScheme",
label = "Color Scheme:",
choices = c("Dark 2" = 'Dark2',
"Accent",
"Set 1" = 'Set1',
"Set 2" = 'Set2',
"Set 3" = 'Set3',
"Pastel 1" = 'Pastel1',
"Pastel 2" = 'Pastel2')
), width = 3, height = 8
),
# Setup main panel.
mainPanel(
# Create a tab panel.
tabsetPanel(
# Add a tab for displaying the histogram.
tabPanel("Bubble Plot", plotOutput("bubblePlot", height = 700, width = 900)),
tabPanel("Small Multiples Plot", plotOutput("scatterPlot", height = 650, width = 900)),
tabPanel("Parallel Coordinates Plot", plotOutput("parrPlot", height = 700, width = 1100)),
tabPanel('Data',
br(),
div(class = 'well well-sm',
'Hey! Look! Here\'s the dataset used to create the plots -- it\'s filtered based on your specifications.'),
dataTableOutput('table'))
)
)
)
)
library(ggplot2)
library(shiny)
library(GGally)
library(scales)
library(grid)
# read in dataframe
df <- data.frame(state.x77,
State = state.name,
Abbrev = state.abb,
Region = as.factor(state.region),
Division = state.division)
# make the column names nice-r
colnames(df)[1:8] <- c("Population",
"Income",
"Illiteracy Rate",
"Life Expectancy",
"Murder Rate",
"High School Graduates",
"Frost",
'Area')
# Label formatter for percentages (illiteracy, hs grads)
percentage_formatter <- function(x) {
return(sprintf("%.1f%%", round(x, 1)))
}
# Create plotting function.
firstPlot <- function(localFrame, colorScheme, xAxis, yAxis) {
# rename columns for use in aes
localFrame$xAxis <- localFrame[, c(xAxis)]
localFrame$yAxis <- localFrame[, c(yAxis)]
# find max and mins of specified axis
minX <- min(localFrame$xAxis) - .02 * min(localFrame$xAxis)
maxX <- max(localFrame$xAxis) + .02 * max(localFrame$xAxis)
minY <- min(localFrame$yAxis) - .02 * min(localFrame$yAxis)
maxY <- max(localFrame$yAxis) + .03 * max(localFrame$yAxis)
p <- ggplot(localFrame, aes(
x = xAxis,
y = yAxis,
color = Region)) +
geom_point(alpha = 0.6, size = 5) +
scale_size_continuous(range = c(5,15), guide = 'none') +
facet_wrap(~Region, ncol = 2) +
# labels
labs( title = paste(as.character(xAxis),'and',
as.character(yAxis),
sep = ' '),
x =  as.character(xAxis),
y = as.character(yAxis)) +
# theme specifications
theme(strip.text = element_text(size=14)) +
theme(legend.position="none") +
theme(axis.text.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 14)) +
guides(colour = guide_legend(override.aes = list(size = 8))) +
theme(panel.background = element_rect(fill = NA)) +
theme(panel.grid.major = element_line(colour = 'gray90')) +
theme(panel.margin = unit(.6, "lines"))
# formatting axes
if (xAxis == 'Illiteracy Rate' | xAxis == 'High School Graduates'){
p <- p + scale_x_continuous(limits = c(minX, maxX),
expand = c(0, .08* (maxX - minX)),
label = percentage_formatter)
}
else{
p <- p + scale_x_continuous(limits = c(minX, maxX),
expand = c(0, .08* (maxX - minX)))
}
if (yAxis == 'Illiteracy Rate' | yAxis == 'High School Graduates'){
p <- p + scale_y_continuous(limits = c(minY, maxY),
label = percentage_formatter)
}
else{
p <- p + scale_y_continuous(limits = c(minY, maxY))
}
# color specification
regions <- levels(localFrame$Region)
my_palette <- brewer_pal(type = "qual", palette = colorScheme)(length(regions))
p <- p + scale_color_manual(values = my_palette, name = 'Region', limits = regions)
return(p)
}
secondPlot <- function(localFrame, colorScheme, regionsToShow, show_labels, xAxis, yAxis, size_var){
# all regions for limits
all_regions <- levels(localFrame$Region)[which(levels(localFrame$Region)!='')]
# rename vars for use in aes()
localFrame$xAxis <- localFrame[, c(xAxis)]
localFrame$yAxis <- localFrame[, c(yAxis)]
localFrame$size_var <- localFrame[, c(size_var)]
# max and mins for plot axis range
minX <- min(localFrame$xAxis) - .02 * min(localFrame$xAxis)
maxX <- max(localFrame$xAxis) + .02 * max(localFrame$xAxis)
minY <- min(localFrame$yAxis) - .02 * min(localFrame$yAxis)
maxY <- max(localFrame$yAxis) + .03 * max(localFrame$yAxis)
# subset based on region choice
if (length(regionsToShow) != 0){
localFrame <- localFrame[which(localFrame$Region %in% regionsToShow),]
}
if (nrow(localFrame) == 0){
return('Data is empty.')
}
p <- ggplot(localFrame, aes(
x = xAxis,
y = yAxis,
color = Region,
size = size_var)) +
geom_point(aes(label=Abbrev), alpha = 0.6) +
scale_size_continuous(range = c(5,15), guide = 'none') +
# labels
labs( title = paste(as.character(xAxis),
as.character(yAxis),
paste('and', as.character(size_var), sep = ' '),
sep = ', '),
x = as.character(xAxis),
y =  as.character(yAxis)) +
# theme specifications
theme(legend.title = element_blank()) +
theme(legend.background = element_blank()) +
theme(legend.key = element_blank()) +
theme(axis.text.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 14)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.position = 'bottom') +
guides(colour = guide_legend(override.aes = list(size = 8))) +
# add note about circle size
annotate(
"text", x = minX + .001*minX , y = maxY ,
hjust = 0, color = "grey40",
label = paste("Circle area is proportional to ", tolower(as.character(size_var)), '.', sep = '')) +
theme(panel.background = element_rect(fill = NA)) +
theme(panel.grid.major = element_line(colour = 'gray90'))
# add in state labels
if (show_labels == TRUE){
p <- p + geom_text(aes(label=Abbrev), hjust=0, vjust=0, show_guide  = F)
}
# formatting axes
if (xAxis == 'Illiteracy Rate' | xAxis == 'High School Graduates'){
p <- p + scale_x_continuous(limits = c(minX, maxX),
expand = c(0, .08* (maxX - minX)),
label = percentage_formatter)
}
else{
p <- p + scale_x_continuous(limits = c(minX, maxX),
expand = c(0, .08* (maxX - minX)))
}
if (yAxis == 'Illiteracy Rate' | yAxis == 'High School Graduates'){
p <- p + scale_y_continuous(limits = c(minY, maxY),
label = percentage_formatter)
}
else{
p <- p + scale_y_continuous(limits = c(minY, maxY))
}
# coloring
regions <- levels(localFrame$Region)
my_palette <- brewer_pal(type = "qual", palette = colorScheme)(length(regions))
p <- p + scale_color_manual(values = my_palette, name = 'Region', limits = all_regions)
return(p)
}
last_plot <- function(localFrame, colorScheme, regionsToShow){
all_regions <- levels(localFrame$Region)[which(levels(localFrame$Region)!='')]
p <- ggparcoord(localFrame,
# use all numeric columns
columns = 1:8,
# group by Region
groupColumn = 11,
# order by order in dataset
order = seq(1, 8),
showPoints = FALSE,
alphaLines = 0.6,
shadeBox = NULL,
scale = "uniminmax"
)
# Start with a basic theme
p <- p + theme_minimal()
# Decrease amount of margin around x, y values
p <- p + scale_y_continuous(expand = c(0.02, 0.02))
p <- p + scale_x_discrete(expand = c(0.05, 0.05))
# Remove axis ticks and labels
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.text.y = element_blank())
# Clear axis lines
p <- p + theme(panel.grid.minor = element_blank())
p <- p + theme(panel.grid.major.y = element_blank())
# Darken vertical lines
p <- p + theme(panel.grid.major.x = element_line(color = "#bbbbbb"))
# Move label to bottom
p <- p + theme(legend.position = "bottom")
# Figure out y-axis range after GGally scales the data
min_y <- min(p$data$value)
max_y <- max(p$data$value)
pad_y <- (max_y - min_y) * 0.1
# Calculate label positions for each veritcal bar
lab_x <- rep(1:8, times = 2) # 2 times, 1 for min 1 for max
lab_y <- rep(c(min_y - pad_y, max_y + pad_y), each = 8)
# Get min and max values from original dataset
lab_z <- c(sapply(localFrame[, 1:8], min), sapply(localFrame[, 1:8], max))
# Convert to character for use as labels
lab_z <- as.character(lab_z)
# Add labels to plot
p <- p + annotate("text", x = lab_x, y = lab_y, label = lab_z, size = 3)
regions <- levels(localFrame$Region)
my_palette <- brewer_pal(type = "qual", palette = colorScheme)(length(regions))
if (length(regionsToShow) != 0){
my_palette[which(!(levels(localFrame$Region) %in% regionsToShow))] <- "gray85"
}
p <- p + scale_color_manual(values = my_palette, name = 'Region', limits = all_regions)
return(p)
}
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
localFrame <- df
# subsetting for data table
my_data <- reactive({
if (length(input$regionsToShow) != 0){
localFrame <- localFrame[which(localFrame$Region %in% input$regionsToShow),]
}
if (nrow(localFrame) == 0){
return('Data is empty.')
}
return(localFrame)
})
# Output scatter plot small multiples
output$scatterPlot <- renderPlot(
{
scatterPlot <- firstPlot(
localFrame,
input$colorScheme,
input$xAxis,
input$yAxis
)
print(scatterPlot)
}
)
output$bubblePlot <- renderPlot(
{
bubblePlot <- secondPlot(
localFrame,
input$colorScheme,
input$regionsToShow,
input$show_labels,
input$xAxis,
input$yAxis,
input$size_var
)
print(bubblePlot)
}
)
output$parrPlot <- renderPlot(
{
parrPlot <- last_plot(
localFrame,
input$colorScheme,
input$regionsToShow
)
print(parrPlot)
}
)
output$table <- renderDataTable({
my_data()},
options = list(sPaginationType = "two_button",
sScrollY = "400px",
bScrollCollapse = 'true'))
})
setwd("~/Documents/_DataVisualization/msan622/homework3")
runApp()
runApp()
runApp()
